{"version":3,"file":"static/js/705.e47607eb.chunk.js","mappings":"uQAEaA,EAAYC,EAAAA,GAAAA,IAAH,0CAITC,EAAOD,EAAAA,GAAAA,GAAH,oMASJE,EAAOF,EAAAA,GAAAA,GAAH,2JAKJG,EAAQH,EAAAA,GAAAA,IAAH,mGAOLI,EAAQJ,EAAAA,GAAAA,GAAH,qF,SCxBH,SAASK,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAChC,OACE,SAACP,EAAD,WACE,SAACE,EAAD,UACGK,EAAQC,KAAI,YAAgC,IAA7BC,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACxB,OACE,UAACR,EAAD,YACE,0BACE,SAACC,EAAD,CACEQ,IACED,EAAW,yCAC2BA,GAD3B,gHAIbE,IAAKH,OAGT,SAACL,EAAD,UAAQK,GAAc,oBAXbD,EAcd,OAIR,CCpBD,IAgCA,EAhCa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,YAA9B,eAAOT,EAAP,KAAgBU,EAAhB,KACA,GAA0BD,EAAAA,EAAAA,YAA1B,eAAOE,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBP,GACbQ,MAAK,SAAAC,GACJ,GAAoB,IAAhBA,EAAKC,OAAT,CAKF,IAAMC,EAAWF,EAAKG,KAAKlB,KAAI,kBAAiC,CAC5DC,GAD2B,EAAGA,GAE9BC,KAF2B,EAAOA,KAGlCC,YAH2B,EAAagB,aAAb,IAM7BV,EAAWQ,EARV,MAFCN,EAAS,yCAWZ,IACAS,OAAM,SAAAV,GAAK,OAAIC,EAASD,EAAMW,QAAnB,GACf,GAAE,CAACf,KAGF,2BACGI,IAAS,SAAC,IAAD,CAAoBW,QAASX,IACtCX,IAAW,SAACD,EAAD,CAASC,QAASA,MAGnC,C,kFCnCYP,EAAYC,EAAAA,GAAAA,IAAH,0CAIT6B,EAAO7B,EAAAA,GAAAA,EAAH,2G,SCHF,SAAS8B,EAAT,GAA0C,IAAZF,EAAW,EAAXA,QAC3C,OACE,SAAC7B,EAAD,WACE,SAAC8B,EAAD,UAAOD,KAGZ,C,4MCNDG,IAAAA,SAAAA,QCFiB,+BDGjBA,IAAAA,SAAAA,OAAwB,CACtBC,QCLc,mCDMdC,OAAO,EACPC,SAAU,SAIL,IAAMC,EAAiB,mCAAG,sGACRJ,IAAAA,IAAU,uBADF,uBACvBT,EADuB,EACvBA,KADuB,kBAGpBA,EAAKc,SAHe,2CAAH,qDAOjBC,EAAY,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACHR,IAAAA,IAAA,8BAAiCO,EAAjC,iBAA+CC,IAD5C,uBAClBjB,EADkB,EAClBA,KADkB,kBAGjBA,EAAKc,SAHY,2CAAH,sDAOZI,EAAe,mCAAG,WAAM3B,GAAN,yFACNkB,IAAAA,IAAA,iBAAoBlB,IADd,uBACrBS,EADqB,EACrBA,KADqB,kBAGpBA,GAHoB,2CAAH,sDAOfF,EAAe,mCAAG,WAAMP,GAAN,yFACNkB,IAAAA,IAAA,iBAAoBlB,EAApB,aADM,uBACrBS,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAOfmB,EAAe,mCAAG,WAAM5B,GAAN,yFACNkB,IAAAA,IAAA,iBAAoBlB,EAApB,aADM,uBACrBS,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,qD","sources":["components/Credits/Credits.styled.jsx","components/Credits/Credits.jsx","components/Cast/Cast.jsx","components/ErrorOccurred/ErrorOccurred.styled.jsx","components/ErrorOccurred/ErrorOccurred.jsx","service/api.js","service/api-key.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 20px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 16px;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n`;\n\nexport const Title = styled.h2`\n  padding: 5px 10px;\n  font-size: 21px;\n  color: #42362b;\n`;\n","import { Container, List, Item, Image, Title } from './Credits.styled';\nimport PropTypes from 'prop-types';\n\nexport default function Credits({ credits }) {\n  return (\n    <Container>\n      <List>\n        {credits.map(({ id, name, profilePath }) => {\n          return (\n            <Item key={id}>\n              <div>\n                <Image\n                  src={\n                    profilePath\n                      ? `https://image.tmdb.org/t/p/w500${profilePath}`\n                      : `https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/No-image-available.jpg/640px-No-image-available.jpg`\n                  }\n                  alt={name}\n                />\n              </div>\n              <Title>{name ? name : 'Without  name'}</Title>\n            </Item>\n          );\n        })}\n      </List>\n    </Container>\n  );\n}\n\n  Credits.propTypes = {\n  credits: PropTypes.array.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'service/api';\nimport ErrorMessageToUser from 'components/ErrorOccurred/ErrorOccurred';\nimport Credits from 'components/Credits/Credits';\n\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    getMovieCredits(movieId)\n      .then(data => {\n        if (data.length === 0) {\n          setError('There is no information about the cast');\n          return;\n        }\n// prepare info about all actors\n      const castInfo = data.cast.map(({ id, name, profile_path }) => ({\n          id,\n          name,\n          profilePath: profile_path,\n      }));\n\n        setCredits(castInfo);\n      })\n      .catch(error => setError(error.message));\n  }, [movieId]);\n\n  return (\n    <div>\n      {error && <ErrorMessageToUser message={error} />}\n      {credits && <Credits credits={credits} />}\n    </div>\n  );\n}\n\nexport default Cast\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 40px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  color: #f17074;\n  font-size: 30px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { Container, Text } from './ErrorOccurred.styled';\n\nexport default function ErrorMessageToUser({ message }) {\n  return (\n    <Container>\n      <Text>{message}</Text>\n    </Container>\n  );\n}\n\nErrorMessageToUser.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\nimport { API_KEY, BASE_URL } from './api-key';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  adult: false,\n  language: 'en-US',\n};\n\n// ! ====== for component Home popular movies ======\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n\n      return data.results;\n}\n\n// ! ====== for component Movies search movies ======\nexport const searchMovies = async (query, page = 1) => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=${page}`);\n\n    return data.results;\n};\n\n// ! ====== for details info about movie ======\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`);\n\n    return data;\n};\n\n// ! ====== get info about the cast of movie ======\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n\n  return data;\n};\n\n// ! ====== get info about the rewiews of movie ======\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n\n  return data;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// !========================Work Requests to API =================================================\n// список самых популярных фильмов на сегодня для создания коллекции на главной странице -\n// https://api.themoviedb.org/3/trending/movie/day?api_key=0d9ddfeb4636025259fcaee6725b8ad3\n\n// поиск кинофильма по ключевому слову на странице фильмов\n// https://api.themoviedb.org/3/search/movie?query=batman&api_key=0d9ddfeb4636025259fcaee6725b8ad3&page=1\n\n//\n// запрос полной информации о фильме для страницы кинофильма\n// https://api.themoviedb.org/3/movie/697843?api_key=0d9ddfeb4636025259fcaee6725b8ad3\n\n//\n// запрос информации о актёрском составе для страницы кинофильма\n// https://api.themoviedb.org/3/movie/697843/credits?language=en-US&api_key=0d9ddfeb4636025259fcaee6725b8ad3\n//\n// запрос обзоров для страницы кинофильма.\n// https://api.themoviedb.org/3/movie/298618/reviews?language=en-US&page=1&api_key=0d9ddfeb4636025259fcaee6725b8ad3\n\n// URL для фото https://image.tmdb.org/t/p/original/ ${film.backdrop_path})\n","const API_KEY = '0d9ddfeb4636025259fcaee6725b8ad3';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport {API_KEY, BASE_URL}\n"],"names":["Container","styled","List","Item","Image","Title","Credits","credits","map","id","name","profilePath","src","alt","movieId","useParams","useState","setCredits","error","setError","useEffect","getMovieCredits","then","data","length","castInfo","cast","profile_path","catch","message","Text","ErrorMessageToUser","axios","api_key","adult","language","getTrendingMovies","results","searchMovies","query","page","getMovieDetails","getMovieReviews"],"sourceRoot":""}